plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.asciidoctor.convert" version "1.5.10"
    id "jacoco"
    id "org.sonarqube" version "3.3"
    id 'java'
    id 'idea'
    id 'org.flywaydb.flyway' version "6.4.2"
}

group = 'wooteco'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

sourceSets {
    acceptanceTest {
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
    documentation {
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }

}

configurations {
    acceptanceTestImplementation.extendsFrom(implementation, testImplementation)
    acceptanceTestRuntimeOnly.extendsFrom(runtimeOnly, testRuntimeOnly)
    acceptanceTestImplementation.canBeResolved(true)
    documentationImplementation.extendsFrom(implementation, testImplementation)
    documentationRuntimeOnly.extendsFrom(runtimeOnly, testRuntimeOnly)
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // open csv
    implementation 'com.opencsv:opencsv:5.5.2'

    // log
    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'

    // jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // login binding
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.4'

    // rest-assured
    acceptanceTestImplementation 'io.rest-assured:rest-assured:3.3.0'
    documentationImplementation 'io.rest-assured:rest-assured:3.3.0'
    documentationImplementation 'io.rest-assured:spring-mock-mvc:3.3.0'


    // cucumber
    acceptanceTestImplementation 'io.cucumber:cucumber-java:6.10.4'
    acceptanceTestImplementation 'io.cucumber:cucumber-spring:6.10.4'
    acceptanceTestImplementation 'io.cucumber:cucumber-junit-platform-engine:6.10.4'

    // rest docs
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.5.RELEASE'
    documentationImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    documentationImplementation 'org.springframework.restdocs:spring-restdocs-restassured'

    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok'

    // reflections
    implementation 'org.reflections:reflections:0.9.10'

    // elastic-search
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation "org.testcontainers:elasticsearch:1.15.3"
    testImplementation "org.testcontainers:elasticsearch:1.16.0"

    //flyway
    implementation 'org.flywaydb:flyway-core:6.4.2'

    // embedded mysql
    implementation 'com.wix:wix-embedded-mysql:4.6.2'

    // webclient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // rss feed
    implementation 'com.rometools:rome:1.18.0'
    implementation 'org.commonmark:commonmark:0.18.2'

    // aws s3
    implementation platform('software.amazon.awssdk:bom:2.5.29')
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.319'


    // IO
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

idea {
    module {
        sourceDirs -= file('src/acceptanceTest/java')
        sourceDirs -= file('src/documentation/java')
        testSourceDirs += file('src/acceptanceTest/java')
        testSourceDirs += file('src/documentation/java')
    }
}

/**
 * 서버를 띄우지 않고 flyway 스크립트만 실행하고 싶은 경우 아래 방법을 통해 실행할 수 있다.
 *
 * 최초로 실행하는 경우 또는 첫 버전 스크립트부터 모두 실행하고 싶은 경우 아래 스크립트를 실행한다.
 * 데이터가 초기화되므로 주의해야 한다.
 * ./gradlew flywayClean flywayBaseline flywayMigrate
 *
 * 이전 버전에서 마이그레이션만 원하는 경우
 * ./gradlew flywayMigrate
 */
flyway {
    url = "jdbc:mysql://rdb-prolog-dev.cqsc6pyqhwww.ap-northeast-2.rds.amazonaws.com:3306/prolog"
    user = "prolog"
    password = "gkrtmqfhrmdksTmsl?"
    locations = ["filesystem:${file("src/main/resources/db/migration/prod").absolutePath}"]
    encoding = "UTF-8"
    outOfOrder = true // 여러브랜치에서 서로 다른 날짜로 만들어도 작동하도록
    validateOnMigrate = true
    baselineVersion = 1.1 // V1.1 스크립트는 이미 실행한 것으로 기준선을 잡는다.
}

task documentationTest(type: Test) {
    testClassesDirs = sourceSets.documentation.output.classesDirs
    classpath = sourceSets.documentation.runtimeClasspath
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    sourceDir 'src/documentation/adoc'
    dependsOn documentationTest
}

task createDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/asciidoc/html5/index.html")
    into file("src/main/resources/static")
}

bootJar {
    dependsOn createDocument
}

task acceptanceTest(type: Test) {
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    useJUnitPlatform()
}

sonarqube {
    properties {
        property "sonar.projectKey", "woowacourse_prolog"
        property "sonar.organization", "woowacourse"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
targetCompatibility = JavaVersion.VERSION_1_8
